# .spirorc
# This file contains custom functions and aliases.
# To load config in your shell, add the following line to your .bashrc or .zshrc file:
# source ~/.spirorc

##############################################################
####      ___ _   _ _  _  ___ _____ ___ ___  _  _ ___     ####
####     | __| | | | \| |/ __|_   _|_ _/ _ \| \| / __|    ####
####     | _|| |_| | .` | (__  | |  | | (_) | .` \__ \    ####
####     |_|  \___/|_|\_|\___| |_| |___\___/|_|\_|___/    ####
####                                                      ####
##############################################################

# General
mkcd() {
    # Creates a directory and navigates into it
    mkdir -p "$1" && cd "$1"
}

hsg() {
    # Searches the command history for all provided keywords
    history | grep "$*"
}

# Python
venv() {
    if [ ! -d ".venv" ]; then
        python -m venv .venv
    fi
    source .venv/bin/activate
}

function ipython {
    # Check if running in a virtual environment
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Path to IPython in the virtual environment
        VENV_IPYTHON="$VIRTUAL_ENV/bin/ipython"

        if [[ -x "$VENV_IPYTHON" ]]; then
            # If IPython is installed in the virtual environment, run it
            "$VENV_IPYTHON" "$@"
            return
        else
            # IPython is not installed in the virtual environment
            echo "IPython is not installed in the virtual environment ($VIRTUAL_ENV)."
        fi
    fi

    # Run global IPython or fallback to system default
    command ipython "$@"
}

# Git
gd() {
    if [ "$#" -eq 0 ]; then
        git diff
    else
        git diff "$@"
    fi
}

gcm() {
    if git rev-parse --verify main &>/dev/null; then
        git checkout main
    elif git rev-parse --verify master &>/dev/null; then
        git checkout master
    else
        echo "Neither 'main' nor 'master' branch exists."
    fi
}

gsa() {
  local stash_number=${1:-0}  # Default to 0 if no argument is provided
  git stash apply "stash@{${stash_number}}"
}

gmm() {
	# Ensures your feature branch is up-to-date by pulling the latest changes from the repository’s primary branch.
	# 1. Verifies you’re not currently on main or master (and aborts if you are).
	# 2. Detects whether the repo uses “main” or “master” as its primary branch.
	# 3. Checks out that primary branch and runs git pull to fetch and integrate remote changes.
	# 4. Returns to your original branch and merges in the updated primary branch.
    # figure out what branch we’re on now
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    # refuse to run on main/master
    if [[ "$current_branch" == "main" || "$current_branch" == "master" ]]; then
        echo "Error: you are on '$current_branch'. This cannot be run on main/master."
        return 1
    fi

    # detect which primary branch exists
    local main_branch
    if git show-ref --verify --quiet refs/heads/main; then
        main_branch=main
    elif git show-ref --verify --quiet refs/heads/master; then
        main_branch=master
    else
        echo "Error: neither 'main' nor 'master' branch exists."
        return 1
    fi

    # switch, pull, switch back, merge
    git checkout "$main_branch"      || return 1
    git pull                         || return 1
    git checkout "$current_branch"   || return 1
    git merge "$main_branch"
}

gce() {
	git commit --allow-empty -m "Empty commit"
	git push
}

###################################################
####        _   _    ___   _   ___ ___ ___     ####
####       /_\ | |  |_ _| /_\ / __| __/ __|    ####
####      / _ \| |__ | | / _ \\__ \ _|\__ \    ####
####     /_/ \_\____|___/_/ \_\___/___|___/    ####
####                                           ####
###################################################

# rc file aliases
alias ezrc='vim ~/.zshrc'
alias esrc='vim ~/.spirorc'
alias evrc='vim ~/.vimrc'

# misc
alias bla='echo bla'

# Git
alias gc='git commit'
alias gs='git status'
alias gp='git push'
alias gl='git log'
alias gbl='git branch --list'
alias gsw='git switch -'
alias gca='git commit --amend -m'
alias gpfl='git push --force-with-lease'
alias gst='git stash'
alias gaac='git add . && git commit'

# Node
alias nrs='npm run start'
alias nrb='npm run build'
